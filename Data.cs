// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: data.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from data.proto</summary>
public static partial class DataReflection {

  #region Descriptor
  /// <summary>File descriptor for data.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static DataReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgpkYXRhLnByb3RvItcICgtQcmljaW5nRGF0YRIKCgJpZBgBIAEoCRINCgVw",
          "cmljZRgCIAEoAhIMCgR0aW1lGAMgASgSEhAKCGN1cnJlbmN5GAQgASgJEhAK",
          "CGV4Y2hhbmdlGAUgASgJEikKCXF1b3RlVHlwZRgGIAEoDjIWLlByaWNpbmdE",
          "YXRhLlF1b3RlVHlwZRIxCgttYXJrZXRIb3VycxgHIAEoDjIcLlByaWNpbmdE",
          "YXRhLk1hcmtldEhvdXJzVHlwZRIVCg1jaGFuZ2VQZXJjZW50GAggASgCEhEK",
          "CWRheVZvbHVtZRgJIAEoEhIPCgdkYXlIaWdoGAogASgCEg4KBmRheUxvdxgL",
          "IAEoAhIOCgZjaGFuZ2UYDCABKAISEQoJc2hvcnROYW1lGA0gASgJEhIKCmV4",
          "cGlyZURhdGUYDiABKBISEQoJb3BlblByaWNlGA8gASgCEhUKDXByZXZpb3Vz",
          "Q2xvc2UYECABKAISEwoLc3RyaWtlUHJpY2UYESABKAISGAoQdW5kZXJseWlu",
          "Z1N5bWJvbBgSIAEoCRIUCgxvcGVuSW50ZXJlc3QYEyABKBISLAoLb3B0aW9u",
          "c1R5cGUYFCABKA4yFy5QcmljaW5nRGF0YS5PcHRpb25UeXBlEhIKCm1pbmlP",
          "cHRpb24YFSABKBISEAoIbGFzdFNpemUYFiABKBISCwoDYmlkGBcgASgCEg8K",
          "B2JpZFNpemUYGCABKBISCwoDYXNrGBkgASgCEg8KB2Fza1NpemUYGiABKBIS",
          "EQoJcHJpY2VIaW50GBsgASgSEhAKCHZvbF8yNGhyGBwgASgSEhgKEHZvbEFs",
          "bEN1cnJlbmNpZXMYHSABKBISFAoMZnJvbWN1cnJlbmN5GB4gASgJEhIKCmxh",
          "c3RNYXJrZXQYHyABKAkSGQoRY2lyY3VsYXRpbmdTdXBwbHkYICABKAESEQoJ",
          "bWFya2V0Y2FwGCEgASgBIoACCglRdW90ZVR5cGUSCAoETk9ORRAAEg0KCUFM",
          "VFNZTUJPTBAFEg0KCUhFQVJUQkVBVBAHEgoKBkVRVUlUWRAIEgkKBUlOREVY",
          "EAkSDgoKTVVUVUFMRlVORBALEg8KC01PTkVZTUFSS0VUEAwSCgoGT1BUSU9O",
          "EA0SDAoIQ1VSUkVOQ1kQDhILCgdXQVJSQU5UEA8SCAoEQk9ORBAREgoKBkZV",
          "VFVSRRASEgcKA0VURhAUEg0KCUNPTU1PRElUWRAXEgwKCEVDTlFVT1RFEBwS",
          "EgoOQ1JZUFRPQ1VSUkVOQ1kQKRINCglJTkRJQ0FUT1IQKhINCghJTkRVU1RS",
          "WRDoByIfCgpPcHRpb25UeXBlEggKBENBTEwQABIHCgNQVVQQASJhCg9NYXJr",
          "ZXRIb3Vyc1R5cGUSDgoKUFJFX01BUktFVBAAEhIKDlJFR1VMQVJfTUFSS0VU",
          "EAESDwoLUE9TVF9NQVJLRVQQAhIZChVFWFRFTkRFRF9IT1VSU19NQVJLRVQQ",
          "AyItCgpTdGF0aWNEYXRhEgoKAmlkGAEgASgJEhMKC2Rpc3BsYXlOYW1lGAUg",
          "ASgJYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::PricingData), global::PricingData.Parser, new[]{ "Id", "Price", "Time", "Currency", "Exchange", "QuoteType", "MarketHours", "ChangePercent", "DayVolume", "DayHigh", "DayLow", "Change", "ShortName", "ExpireDate", "OpenPrice", "PreviousClose", "StrikePrice", "UnderlyingSymbol", "OpenInterest", "OptionsType", "MiniOption", "LastSize", "Bid", "BidSize", "Ask", "AskSize", "PriceHint", "Vol24Hr", "VolAllCurrencies", "Fromcurrency", "LastMarket", "CirculatingSupply", "Marketcap" }, null, new[]{ typeof(global::PricingData.Types.QuoteType), typeof(global::PricingData.Types.OptionType), typeof(global::PricingData.Types.MarketHoursType) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StaticData), global::StaticData.Parser, new[]{ "Id", "DisplayName" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class PricingData : pb::IMessage<PricingData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<PricingData> _parser = new pb::MessageParser<PricingData>(() => new PricingData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<PricingData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PricingData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PricingData(PricingData other) : this() {
    id_ = other.id_;
    price_ = other.price_;
    time_ = other.time_;
    currency_ = other.currency_;
    exchange_ = other.exchange_;
    quoteType_ = other.quoteType_;
    marketHours_ = other.marketHours_;
    changePercent_ = other.changePercent_;
    dayVolume_ = other.dayVolume_;
    dayHigh_ = other.dayHigh_;
    dayLow_ = other.dayLow_;
    change_ = other.change_;
    shortName_ = other.shortName_;
    expireDate_ = other.expireDate_;
    openPrice_ = other.openPrice_;
    previousClose_ = other.previousClose_;
    strikePrice_ = other.strikePrice_;
    underlyingSymbol_ = other.underlyingSymbol_;
    openInterest_ = other.openInterest_;
    optionsType_ = other.optionsType_;
    miniOption_ = other.miniOption_;
    lastSize_ = other.lastSize_;
    bid_ = other.bid_;
    bidSize_ = other.bidSize_;
    ask_ = other.ask_;
    askSize_ = other.askSize_;
    priceHint_ = other.priceHint_;
    vol24Hr_ = other.vol24Hr_;
    volAllCurrencies_ = other.volAllCurrencies_;
    fromcurrency_ = other.fromcurrency_;
    lastMarket_ = other.lastMarket_;
    circulatingSupply_ = other.circulatingSupply_;
    marketcap_ = other.marketcap_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PricingData Clone() {
    return new PricingData(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "price" field.</summary>
  public const int PriceFieldNumber = 2;
  private float price_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Price {
    get { return price_; }
    set {
      price_ = value;
    }
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 3;
  private long time_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  /// <summary>Field number for the "currency" field.</summary>
  public const int CurrencyFieldNumber = 4;
  private string currency_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Currency {
    get { return currency_; }
    set {
      currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "exchange" field.</summary>
  public const int ExchangeFieldNumber = 5;
  private string exchange_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Exchange {
    get { return exchange_; }
    set {
      exchange_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "quoteType" field.</summary>
  public const int QuoteTypeFieldNumber = 6;
  private global::PricingData.Types.QuoteType quoteType_ = global::PricingData.Types.QuoteType.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::PricingData.Types.QuoteType QuoteType {
    get { return quoteType_; }
    set {
      quoteType_ = value;
    }
  }

  /// <summary>Field number for the "marketHours" field.</summary>
  public const int MarketHoursFieldNumber = 7;
  private global::PricingData.Types.MarketHoursType marketHours_ = global::PricingData.Types.MarketHoursType.PreMarket;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::PricingData.Types.MarketHoursType MarketHours {
    get { return marketHours_; }
    set {
      marketHours_ = value;
    }
  }

  /// <summary>Field number for the "changePercent" field.</summary>
  public const int ChangePercentFieldNumber = 8;
  private float changePercent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float ChangePercent {
    get { return changePercent_; }
    set {
      changePercent_ = value;
    }
  }

  /// <summary>Field number for the "dayVolume" field.</summary>
  public const int DayVolumeFieldNumber = 9;
  private long dayVolume_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long DayVolume {
    get { return dayVolume_; }
    set {
      dayVolume_ = value;
    }
  }

  /// <summary>Field number for the "dayHigh" field.</summary>
  public const int DayHighFieldNumber = 10;
  private float dayHigh_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float DayHigh {
    get { return dayHigh_; }
    set {
      dayHigh_ = value;
    }
  }

  /// <summary>Field number for the "dayLow" field.</summary>
  public const int DayLowFieldNumber = 11;
  private float dayLow_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float DayLow {
    get { return dayLow_; }
    set {
      dayLow_ = value;
    }
  }

  /// <summary>Field number for the "change" field.</summary>
  public const int ChangeFieldNumber = 12;
  private float change_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Change {
    get { return change_; }
    set {
      change_ = value;
    }
  }

  /// <summary>Field number for the "shortName" field.</summary>
  public const int ShortNameFieldNumber = 13;
  private string shortName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ShortName {
    get { return shortName_; }
    set {
      shortName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "expireDate" field.</summary>
  public const int ExpireDateFieldNumber = 14;
  private long expireDate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long ExpireDate {
    get { return expireDate_; }
    set {
      expireDate_ = value;
    }
  }

  /// <summary>Field number for the "openPrice" field.</summary>
  public const int OpenPriceFieldNumber = 15;
  private float openPrice_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float OpenPrice {
    get { return openPrice_; }
    set {
      openPrice_ = value;
    }
  }

  /// <summary>Field number for the "previousClose" field.</summary>
  public const int PreviousCloseFieldNumber = 16;
  private float previousClose_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float PreviousClose {
    get { return previousClose_; }
    set {
      previousClose_ = value;
    }
  }

  /// <summary>Field number for the "strikePrice" field.</summary>
  public const int StrikePriceFieldNumber = 17;
  private float strikePrice_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float StrikePrice {
    get { return strikePrice_; }
    set {
      strikePrice_ = value;
    }
  }

  /// <summary>Field number for the "underlyingSymbol" field.</summary>
  public const int UnderlyingSymbolFieldNumber = 18;
  private string underlyingSymbol_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string UnderlyingSymbol {
    get { return underlyingSymbol_; }
    set {
      underlyingSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "openInterest" field.</summary>
  public const int OpenInterestFieldNumber = 19;
  private long openInterest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long OpenInterest {
    get { return openInterest_; }
    set {
      openInterest_ = value;
    }
  }

  /// <summary>Field number for the "optionsType" field.</summary>
  public const int OptionsTypeFieldNumber = 20;
  private global::PricingData.Types.OptionType optionsType_ = global::PricingData.Types.OptionType.Call;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::PricingData.Types.OptionType OptionsType {
    get { return optionsType_; }
    set {
      optionsType_ = value;
    }
  }

  /// <summary>Field number for the "miniOption" field.</summary>
  public const int MiniOptionFieldNumber = 21;
  private long miniOption_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long MiniOption {
    get { return miniOption_; }
    set {
      miniOption_ = value;
    }
  }

  /// <summary>Field number for the "lastSize" field.</summary>
  public const int LastSizeFieldNumber = 22;
  private long lastSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long LastSize {
    get { return lastSize_; }
    set {
      lastSize_ = value;
    }
  }

  /// <summary>Field number for the "bid" field.</summary>
  public const int BidFieldNumber = 23;
  private float bid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Bid {
    get { return bid_; }
    set {
      bid_ = value;
    }
  }

  /// <summary>Field number for the "bidSize" field.</summary>
  public const int BidSizeFieldNumber = 24;
  private long bidSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long BidSize {
    get { return bidSize_; }
    set {
      bidSize_ = value;
    }
  }

  /// <summary>Field number for the "ask" field.</summary>
  public const int AskFieldNumber = 25;
  private float ask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public float Ask {
    get { return ask_; }
    set {
      ask_ = value;
    }
  }

  /// <summary>Field number for the "askSize" field.</summary>
  public const int AskSizeFieldNumber = 26;
  private long askSize_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long AskSize {
    get { return askSize_; }
    set {
      askSize_ = value;
    }
  }

  /// <summary>Field number for the "priceHint" field.</summary>
  public const int PriceHintFieldNumber = 27;
  private long priceHint_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long PriceHint {
    get { return priceHint_; }
    set {
      priceHint_ = value;
    }
  }

  /// <summary>Field number for the "vol_24hr" field.</summary>
  public const int Vol24HrFieldNumber = 28;
  private long vol24Hr_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long Vol24Hr {
    get { return vol24Hr_; }
    set {
      vol24Hr_ = value;
    }
  }

  /// <summary>Field number for the "volAllCurrencies" field.</summary>
  public const int VolAllCurrenciesFieldNumber = 29;
  private long volAllCurrencies_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long VolAllCurrencies {
    get { return volAllCurrencies_; }
    set {
      volAllCurrencies_ = value;
    }
  }

  /// <summary>Field number for the "fromcurrency" field.</summary>
  public const int FromcurrencyFieldNumber = 30;
  private string fromcurrency_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Fromcurrency {
    get { return fromcurrency_; }
    set {
      fromcurrency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "lastMarket" field.</summary>
  public const int LastMarketFieldNumber = 31;
  private string lastMarket_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string LastMarket {
    get { return lastMarket_; }
    set {
      lastMarket_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "circulatingSupply" field.</summary>
  public const int CirculatingSupplyFieldNumber = 32;
  private double circulatingSupply_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double CirculatingSupply {
    get { return circulatingSupply_; }
    set {
      circulatingSupply_ = value;
    }
  }

  /// <summary>Field number for the "marketcap" field.</summary>
  public const int MarketcapFieldNumber = 33;
  private double marketcap_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public double Marketcap {
    get { return marketcap_; }
    set {
      marketcap_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as PricingData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(PricingData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Price, other.Price)) return false;
    if (Time != other.Time) return false;
    if (Currency != other.Currency) return false;
    if (Exchange != other.Exchange) return false;
    if (QuoteType != other.QuoteType) return false;
    if (MarketHours != other.MarketHours) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChangePercent, other.ChangePercent)) return false;
    if (DayVolume != other.DayVolume) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayHigh, other.DayHigh)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DayLow, other.DayLow)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Change, other.Change)) return false;
    if (ShortName != other.ShortName) return false;
    if (ExpireDate != other.ExpireDate) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OpenPrice, other.OpenPrice)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PreviousClose, other.PreviousClose)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StrikePrice, other.StrikePrice)) return false;
    if (UnderlyingSymbol != other.UnderlyingSymbol) return false;
    if (OpenInterest != other.OpenInterest) return false;
    if (OptionsType != other.OptionsType) return false;
    if (MiniOption != other.MiniOption) return false;
    if (LastSize != other.LastSize) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Bid, other.Bid)) return false;
    if (BidSize != other.BidSize) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Ask, other.Ask)) return false;
    if (AskSize != other.AskSize) return false;
    if (PriceHint != other.PriceHint) return false;
    if (Vol24Hr != other.Vol24Hr) return false;
    if (VolAllCurrencies != other.VolAllCurrencies) return false;
    if (Fromcurrency != other.Fromcurrency) return false;
    if (LastMarket != other.LastMarket) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CirculatingSupply, other.CirculatingSupply)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Marketcap, other.Marketcap)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Price != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Price);
    if (Time != 0L) hash ^= Time.GetHashCode();
    if (Currency.Length != 0) hash ^= Currency.GetHashCode();
    if (Exchange.Length != 0) hash ^= Exchange.GetHashCode();
    if (QuoteType != global::PricingData.Types.QuoteType.None) hash ^= QuoteType.GetHashCode();
    if (MarketHours != global::PricingData.Types.MarketHoursType.PreMarket) hash ^= MarketHours.GetHashCode();
    if (ChangePercent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChangePercent);
    if (DayVolume != 0L) hash ^= DayVolume.GetHashCode();
    if (DayHigh != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayHigh);
    if (DayLow != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DayLow);
    if (Change != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Change);
    if (ShortName.Length != 0) hash ^= ShortName.GetHashCode();
    if (ExpireDate != 0L) hash ^= ExpireDate.GetHashCode();
    if (OpenPrice != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OpenPrice);
    if (PreviousClose != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PreviousClose);
    if (StrikePrice != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StrikePrice);
    if (UnderlyingSymbol.Length != 0) hash ^= UnderlyingSymbol.GetHashCode();
    if (OpenInterest != 0L) hash ^= OpenInterest.GetHashCode();
    if (OptionsType != global::PricingData.Types.OptionType.Call) hash ^= OptionsType.GetHashCode();
    if (MiniOption != 0L) hash ^= MiniOption.GetHashCode();
    if (LastSize != 0L) hash ^= LastSize.GetHashCode();
    if (Bid != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Bid);
    if (BidSize != 0L) hash ^= BidSize.GetHashCode();
    if (Ask != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Ask);
    if (AskSize != 0L) hash ^= AskSize.GetHashCode();
    if (PriceHint != 0L) hash ^= PriceHint.GetHashCode();
    if (Vol24Hr != 0L) hash ^= Vol24Hr.GetHashCode();
    if (VolAllCurrencies != 0L) hash ^= VolAllCurrencies.GetHashCode();
    if (Fromcurrency.Length != 0) hash ^= Fromcurrency.GetHashCode();
    if (LastMarket.Length != 0) hash ^= LastMarket.GetHashCode();
    if (CirculatingSupply != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CirculatingSupply);
    if (Marketcap != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Marketcap);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Price != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Price);
    }
    if (Time != 0L) {
      output.WriteRawTag(24);
      output.WriteSInt64(Time);
    }
    if (Currency.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Currency);
    }
    if (Exchange.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Exchange);
    }
    if (QuoteType != global::PricingData.Types.QuoteType.None) {
      output.WriteRawTag(48);
      output.WriteEnum((int) QuoteType);
    }
    if (MarketHours != global::PricingData.Types.MarketHoursType.PreMarket) {
      output.WriteRawTag(56);
      output.WriteEnum((int) MarketHours);
    }
    if (ChangePercent != 0F) {
      output.WriteRawTag(69);
      output.WriteFloat(ChangePercent);
    }
    if (DayVolume != 0L) {
      output.WriteRawTag(72);
      output.WriteSInt64(DayVolume);
    }
    if (DayHigh != 0F) {
      output.WriteRawTag(85);
      output.WriteFloat(DayHigh);
    }
    if (DayLow != 0F) {
      output.WriteRawTag(93);
      output.WriteFloat(DayLow);
    }
    if (Change != 0F) {
      output.WriteRawTag(101);
      output.WriteFloat(Change);
    }
    if (ShortName.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(ShortName);
    }
    if (ExpireDate != 0L) {
      output.WriteRawTag(112);
      output.WriteSInt64(ExpireDate);
    }
    if (OpenPrice != 0F) {
      output.WriteRawTag(125);
      output.WriteFloat(OpenPrice);
    }
    if (PreviousClose != 0F) {
      output.WriteRawTag(133, 1);
      output.WriteFloat(PreviousClose);
    }
    if (StrikePrice != 0F) {
      output.WriteRawTag(141, 1);
      output.WriteFloat(StrikePrice);
    }
    if (UnderlyingSymbol.Length != 0) {
      output.WriteRawTag(146, 1);
      output.WriteString(UnderlyingSymbol);
    }
    if (OpenInterest != 0L) {
      output.WriteRawTag(152, 1);
      output.WriteSInt64(OpenInterest);
    }
    if (OptionsType != global::PricingData.Types.OptionType.Call) {
      output.WriteRawTag(160, 1);
      output.WriteEnum((int) OptionsType);
    }
    if (MiniOption != 0L) {
      output.WriteRawTag(168, 1);
      output.WriteSInt64(MiniOption);
    }
    if (LastSize != 0L) {
      output.WriteRawTag(176, 1);
      output.WriteSInt64(LastSize);
    }
    if (Bid != 0F) {
      output.WriteRawTag(189, 1);
      output.WriteFloat(Bid);
    }
    if (BidSize != 0L) {
      output.WriteRawTag(192, 1);
      output.WriteSInt64(BidSize);
    }
    if (Ask != 0F) {
      output.WriteRawTag(205, 1);
      output.WriteFloat(Ask);
    }
    if (AskSize != 0L) {
      output.WriteRawTag(208, 1);
      output.WriteSInt64(AskSize);
    }
    if (PriceHint != 0L) {
      output.WriteRawTag(216, 1);
      output.WriteSInt64(PriceHint);
    }
    if (Vol24Hr != 0L) {
      output.WriteRawTag(224, 1);
      output.WriteSInt64(Vol24Hr);
    }
    if (VolAllCurrencies != 0L) {
      output.WriteRawTag(232, 1);
      output.WriteSInt64(VolAllCurrencies);
    }
    if (Fromcurrency.Length != 0) {
      output.WriteRawTag(242, 1);
      output.WriteString(Fromcurrency);
    }
    if (LastMarket.Length != 0) {
      output.WriteRawTag(250, 1);
      output.WriteString(LastMarket);
    }
    if (CirculatingSupply != 0D) {
      output.WriteRawTag(129, 2);
      output.WriteDouble(CirculatingSupply);
    }
    if (Marketcap != 0D) {
      output.WriteRawTag(137, 2);
      output.WriteDouble(Marketcap);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Price != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Price);
    }
    if (Time != 0L) {
      output.WriteRawTag(24);
      output.WriteSInt64(Time);
    }
    if (Currency.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Currency);
    }
    if (Exchange.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Exchange);
    }
    if (QuoteType != global::PricingData.Types.QuoteType.None) {
      output.WriteRawTag(48);
      output.WriteEnum((int) QuoteType);
    }
    if (MarketHours != global::PricingData.Types.MarketHoursType.PreMarket) {
      output.WriteRawTag(56);
      output.WriteEnum((int) MarketHours);
    }
    if (ChangePercent != 0F) {
      output.WriteRawTag(69);
      output.WriteFloat(ChangePercent);
    }
    if (DayVolume != 0L) {
      output.WriteRawTag(72);
      output.WriteSInt64(DayVolume);
    }
    if (DayHigh != 0F) {
      output.WriteRawTag(85);
      output.WriteFloat(DayHigh);
    }
    if (DayLow != 0F) {
      output.WriteRawTag(93);
      output.WriteFloat(DayLow);
    }
    if (Change != 0F) {
      output.WriteRawTag(101);
      output.WriteFloat(Change);
    }
    if (ShortName.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(ShortName);
    }
    if (ExpireDate != 0L) {
      output.WriteRawTag(112);
      output.WriteSInt64(ExpireDate);
    }
    if (OpenPrice != 0F) {
      output.WriteRawTag(125);
      output.WriteFloat(OpenPrice);
    }
    if (PreviousClose != 0F) {
      output.WriteRawTag(133, 1);
      output.WriteFloat(PreviousClose);
    }
    if (StrikePrice != 0F) {
      output.WriteRawTag(141, 1);
      output.WriteFloat(StrikePrice);
    }
    if (UnderlyingSymbol.Length != 0) {
      output.WriteRawTag(146, 1);
      output.WriteString(UnderlyingSymbol);
    }
    if (OpenInterest != 0L) {
      output.WriteRawTag(152, 1);
      output.WriteSInt64(OpenInterest);
    }
    if (OptionsType != global::PricingData.Types.OptionType.Call) {
      output.WriteRawTag(160, 1);
      output.WriteEnum((int) OptionsType);
    }
    if (MiniOption != 0L) {
      output.WriteRawTag(168, 1);
      output.WriteSInt64(MiniOption);
    }
    if (LastSize != 0L) {
      output.WriteRawTag(176, 1);
      output.WriteSInt64(LastSize);
    }
    if (Bid != 0F) {
      output.WriteRawTag(189, 1);
      output.WriteFloat(Bid);
    }
    if (BidSize != 0L) {
      output.WriteRawTag(192, 1);
      output.WriteSInt64(BidSize);
    }
    if (Ask != 0F) {
      output.WriteRawTag(205, 1);
      output.WriteFloat(Ask);
    }
    if (AskSize != 0L) {
      output.WriteRawTag(208, 1);
      output.WriteSInt64(AskSize);
    }
    if (PriceHint != 0L) {
      output.WriteRawTag(216, 1);
      output.WriteSInt64(PriceHint);
    }
    if (Vol24Hr != 0L) {
      output.WriteRawTag(224, 1);
      output.WriteSInt64(Vol24Hr);
    }
    if (VolAllCurrencies != 0L) {
      output.WriteRawTag(232, 1);
      output.WriteSInt64(VolAllCurrencies);
    }
    if (Fromcurrency.Length != 0) {
      output.WriteRawTag(242, 1);
      output.WriteString(Fromcurrency);
    }
    if (LastMarket.Length != 0) {
      output.WriteRawTag(250, 1);
      output.WriteString(LastMarket);
    }
    if (CirculatingSupply != 0D) {
      output.WriteRawTag(129, 2);
      output.WriteDouble(CirculatingSupply);
    }
    if (Marketcap != 0D) {
      output.WriteRawTag(137, 2);
      output.WriteDouble(Marketcap);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Price != 0F) {
      size += 1 + 4;
    }
    if (Time != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Time);
    }
    if (Currency.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
    }
    if (Exchange.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Exchange);
    }
    if (QuoteType != global::PricingData.Types.QuoteType.None) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) QuoteType);
    }
    if (MarketHours != global::PricingData.Types.MarketHoursType.PreMarket) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MarketHours);
    }
    if (ChangePercent != 0F) {
      size += 1 + 4;
    }
    if (DayVolume != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeSInt64Size(DayVolume);
    }
    if (DayHigh != 0F) {
      size += 1 + 4;
    }
    if (DayLow != 0F) {
      size += 1 + 4;
    }
    if (Change != 0F) {
      size += 1 + 4;
    }
    if (ShortName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ShortName);
    }
    if (ExpireDate != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ExpireDate);
    }
    if (OpenPrice != 0F) {
      size += 1 + 4;
    }
    if (PreviousClose != 0F) {
      size += 2 + 4;
    }
    if (StrikePrice != 0F) {
      size += 2 + 4;
    }
    if (UnderlyingSymbol.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(UnderlyingSymbol);
    }
    if (OpenInterest != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeSInt64Size(OpenInterest);
    }
    if (OptionsType != global::PricingData.Types.OptionType.Call) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OptionsType);
    }
    if (MiniOption != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeSInt64Size(MiniOption);
    }
    if (LastSize != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeSInt64Size(LastSize);
    }
    if (Bid != 0F) {
      size += 2 + 4;
    }
    if (BidSize != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeSInt64Size(BidSize);
    }
    if (Ask != 0F) {
      size += 2 + 4;
    }
    if (AskSize != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeSInt64Size(AskSize);
    }
    if (PriceHint != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeSInt64Size(PriceHint);
    }
    if (Vol24Hr != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeSInt64Size(Vol24Hr);
    }
    if (VolAllCurrencies != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeSInt64Size(VolAllCurrencies);
    }
    if (Fromcurrency.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Fromcurrency);
    }
    if (LastMarket.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(LastMarket);
    }
    if (CirculatingSupply != 0D) {
      size += 2 + 8;
    }
    if (Marketcap != 0D) {
      size += 2 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(PricingData other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Price != 0F) {
      Price = other.Price;
    }
    if (other.Time != 0L) {
      Time = other.Time;
    }
    if (other.Currency.Length != 0) {
      Currency = other.Currency;
    }
    if (other.Exchange.Length != 0) {
      Exchange = other.Exchange;
    }
    if (other.QuoteType != global::PricingData.Types.QuoteType.None) {
      QuoteType = other.QuoteType;
    }
    if (other.MarketHours != global::PricingData.Types.MarketHoursType.PreMarket) {
      MarketHours = other.MarketHours;
    }
    if (other.ChangePercent != 0F) {
      ChangePercent = other.ChangePercent;
    }
    if (other.DayVolume != 0L) {
      DayVolume = other.DayVolume;
    }
    if (other.DayHigh != 0F) {
      DayHigh = other.DayHigh;
    }
    if (other.DayLow != 0F) {
      DayLow = other.DayLow;
    }
    if (other.Change != 0F) {
      Change = other.Change;
    }
    if (other.ShortName.Length != 0) {
      ShortName = other.ShortName;
    }
    if (other.ExpireDate != 0L) {
      ExpireDate = other.ExpireDate;
    }
    if (other.OpenPrice != 0F) {
      OpenPrice = other.OpenPrice;
    }
    if (other.PreviousClose != 0F) {
      PreviousClose = other.PreviousClose;
    }
    if (other.StrikePrice != 0F) {
      StrikePrice = other.StrikePrice;
    }
    if (other.UnderlyingSymbol.Length != 0) {
      UnderlyingSymbol = other.UnderlyingSymbol;
    }
    if (other.OpenInterest != 0L) {
      OpenInterest = other.OpenInterest;
    }
    if (other.OptionsType != global::PricingData.Types.OptionType.Call) {
      OptionsType = other.OptionsType;
    }
    if (other.MiniOption != 0L) {
      MiniOption = other.MiniOption;
    }
    if (other.LastSize != 0L) {
      LastSize = other.LastSize;
    }
    if (other.Bid != 0F) {
      Bid = other.Bid;
    }
    if (other.BidSize != 0L) {
      BidSize = other.BidSize;
    }
    if (other.Ask != 0F) {
      Ask = other.Ask;
    }
    if (other.AskSize != 0L) {
      AskSize = other.AskSize;
    }
    if (other.PriceHint != 0L) {
      PriceHint = other.PriceHint;
    }
    if (other.Vol24Hr != 0L) {
      Vol24Hr = other.Vol24Hr;
    }
    if (other.VolAllCurrencies != 0L) {
      VolAllCurrencies = other.VolAllCurrencies;
    }
    if (other.Fromcurrency.Length != 0) {
      Fromcurrency = other.Fromcurrency;
    }
    if (other.LastMarket.Length != 0) {
      LastMarket = other.LastMarket;
    }
    if (other.CirculatingSupply != 0D) {
      CirculatingSupply = other.CirculatingSupply;
    }
    if (other.Marketcap != 0D) {
      Marketcap = other.Marketcap;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 21: {
          Price = input.ReadFloat();
          break;
        }
        case 24: {
          Time = input.ReadSInt64();
          break;
        }
        case 34: {
          Currency = input.ReadString();
          break;
        }
        case 42: {
          Exchange = input.ReadString();
          break;
        }
        case 48: {
          QuoteType = (global::PricingData.Types.QuoteType) input.ReadEnum();
          break;
        }
        case 56: {
          MarketHours = (global::PricingData.Types.MarketHoursType) input.ReadEnum();
          break;
        }
        case 69: {
          ChangePercent = input.ReadFloat();
          break;
        }
        case 72: {
          DayVolume = input.ReadSInt64();
          break;
        }
        case 85: {
          DayHigh = input.ReadFloat();
          break;
        }
        case 93: {
          DayLow = input.ReadFloat();
          break;
        }
        case 101: {
          Change = input.ReadFloat();
          break;
        }
        case 106: {
          ShortName = input.ReadString();
          break;
        }
        case 112: {
          ExpireDate = input.ReadSInt64();
          break;
        }
        case 125: {
          OpenPrice = input.ReadFloat();
          break;
        }
        case 133: {
          PreviousClose = input.ReadFloat();
          break;
        }
        case 141: {
          StrikePrice = input.ReadFloat();
          break;
        }
        case 146: {
          UnderlyingSymbol = input.ReadString();
          break;
        }
        case 152: {
          OpenInterest = input.ReadSInt64();
          break;
        }
        case 160: {
          OptionsType = (global::PricingData.Types.OptionType) input.ReadEnum();
          break;
        }
        case 168: {
          MiniOption = input.ReadSInt64();
          break;
        }
        case 176: {
          LastSize = input.ReadSInt64();
          break;
        }
        case 189: {
          Bid = input.ReadFloat();
          break;
        }
        case 192: {
          BidSize = input.ReadSInt64();
          break;
        }
        case 205: {
          Ask = input.ReadFloat();
          break;
        }
        case 208: {
          AskSize = input.ReadSInt64();
          break;
        }
        case 216: {
          PriceHint = input.ReadSInt64();
          break;
        }
        case 224: {
          Vol24Hr = input.ReadSInt64();
          break;
        }
        case 232: {
          VolAllCurrencies = input.ReadSInt64();
          break;
        }
        case 242: {
          Fromcurrency = input.ReadString();
          break;
        }
        case 250: {
          LastMarket = input.ReadString();
          break;
        }
        case 257: {
          CirculatingSupply = input.ReadDouble();
          break;
        }
        case 265: {
          Marketcap = input.ReadDouble();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 21: {
          Price = input.ReadFloat();
          break;
        }
        case 24: {
          Time = input.ReadSInt64();
          break;
        }
        case 34: {
          Currency = input.ReadString();
          break;
        }
        case 42: {
          Exchange = input.ReadString();
          break;
        }
        case 48: {
          QuoteType = (global::PricingData.Types.QuoteType) input.ReadEnum();
          break;
        }
        case 56: {
          MarketHours = (global::PricingData.Types.MarketHoursType) input.ReadEnum();
          break;
        }
        case 69: {
          ChangePercent = input.ReadFloat();
          break;
        }
        case 72: {
          DayVolume = input.ReadSInt64();
          break;
        }
        case 85: {
          DayHigh = input.ReadFloat();
          break;
        }
        case 93: {
          DayLow = input.ReadFloat();
          break;
        }
        case 101: {
          Change = input.ReadFloat();
          break;
        }
        case 106: {
          ShortName = input.ReadString();
          break;
        }
        case 112: {
          ExpireDate = input.ReadSInt64();
          break;
        }
        case 125: {
          OpenPrice = input.ReadFloat();
          break;
        }
        case 133: {
          PreviousClose = input.ReadFloat();
          break;
        }
        case 141: {
          StrikePrice = input.ReadFloat();
          break;
        }
        case 146: {
          UnderlyingSymbol = input.ReadString();
          break;
        }
        case 152: {
          OpenInterest = input.ReadSInt64();
          break;
        }
        case 160: {
          OptionsType = (global::PricingData.Types.OptionType) input.ReadEnum();
          break;
        }
        case 168: {
          MiniOption = input.ReadSInt64();
          break;
        }
        case 176: {
          LastSize = input.ReadSInt64();
          break;
        }
        case 189: {
          Bid = input.ReadFloat();
          break;
        }
        case 192: {
          BidSize = input.ReadSInt64();
          break;
        }
        case 205: {
          Ask = input.ReadFloat();
          break;
        }
        case 208: {
          AskSize = input.ReadSInt64();
          break;
        }
        case 216: {
          PriceHint = input.ReadSInt64();
          break;
        }
        case 224: {
          Vol24Hr = input.ReadSInt64();
          break;
        }
        case 232: {
          VolAllCurrencies = input.ReadSInt64();
          break;
        }
        case 242: {
          Fromcurrency = input.ReadString();
          break;
        }
        case 250: {
          LastMarket = input.ReadString();
          break;
        }
        case 257: {
          CirculatingSupply = input.ReadDouble();
          break;
        }
        case 265: {
          Marketcap = input.ReadDouble();
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the PricingData message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    public enum QuoteType {
      [pbr::OriginalName("NONE")] None = 0,
      [pbr::OriginalName("ALTSYMBOL")] Altsymbol = 5,
      [pbr::OriginalName("HEARTBEAT")] Heartbeat = 7,
      [pbr::OriginalName("EQUITY")] Equity = 8,
      [pbr::OriginalName("INDEX")] Index = 9,
      [pbr::OriginalName("MUTUALFUND")] Mutualfund = 11,
      [pbr::OriginalName("MONEYMARKET")] Moneymarket = 12,
      [pbr::OriginalName("OPTION")] Option = 13,
      [pbr::OriginalName("CURRENCY")] Currency = 14,
      [pbr::OriginalName("WARRANT")] Warrant = 15,
      [pbr::OriginalName("BOND")] Bond = 17,
      [pbr::OriginalName("FUTURE")] Future = 18,
      [pbr::OriginalName("ETF")] Etf = 20,
      [pbr::OriginalName("COMMODITY")] Commodity = 23,
      [pbr::OriginalName("ECNQUOTE")] Ecnquote = 28,
      [pbr::OriginalName("CRYPTOCURRENCY")] Cryptocurrency = 41,
      [pbr::OriginalName("INDICATOR")] Indicator = 42,
      [pbr::OriginalName("INDUSTRY")] Industry = 1000,
    }

    public enum OptionType {
      [pbr::OriginalName("CALL")] Call = 0,
      [pbr::OriginalName("PUT")] Put = 1,
    }

    public enum MarketHoursType {
      [pbr::OriginalName("PRE_MARKET")] PreMarket = 0,
      [pbr::OriginalName("REGULAR_MARKET")] RegularMarket = 1,
      [pbr::OriginalName("POST_MARKET")] PostMarket = 2,
      [pbr::OriginalName("EXTENDED_HOURS_MARKET")] ExtendedHoursMarket = 3,
    }

  }
  #endregion

}

[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class StaticData : pb::IMessage<StaticData>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<StaticData> _parser = new pb::MessageParser<StaticData>(() => new StaticData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<StaticData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::DataReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public StaticData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public StaticData(StaticData other) : this() {
    id_ = other.id_;
    displayName_ = other.displayName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public StaticData Clone() {
    return new StaticData(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "displayName" field.</summary>
  public const int DisplayNameFieldNumber = 5;
  private string displayName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string DisplayName {
    get { return displayName_; }
    set {
      displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as StaticData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(StaticData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (DisplayName != other.DisplayName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (DisplayName.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(DisplayName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (DisplayName.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(DisplayName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (DisplayName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(StaticData other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.DisplayName.Length != 0) {
      DisplayName = other.DisplayName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 42: {
          DisplayName = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 42: {
          DisplayName = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
